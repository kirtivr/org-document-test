#+title: Which is a good format to make documents?
#+options: toc:t 

# #+options: tex:imagemagick
#+property: cache yes
#+property: exports results

#+LATEX_COMPILER: xelatex

#+LATEX_HEADER: \usepackage{tikz}
#+latex_header: \usepackage{amsthm}
#+latex_header: \newtheorem{theorem}{Theorem}
#+latex_header: \newtheorem{definition}{Definition}

#+latex_header: \usepackage{fontspec}
#+latex_header: \setromanfont{Purisa}
#+latex_header: \setsansfont{Verdana}
#+latex_header: \setmonofont{Ubuntu Mono}

#+LaTeX_HEADER: \hypersetup{colorlinks=true, linkcolor=blue}

#+latex_header: \usepackage{makeidx}
#+latex_header: \makeindex

#+latex_header: \usepackage{listings}

# see http://www.w3schools.com/css/css_font.asp for more info
#+HTML_HEAD: <style>.theorem {font-size: 1.5em; color: green; font-family: arial; text-decoration:underline;}
#+HTML_HEAD: .theorem:before {content: "Theorem: "; font-weight: bold}</style>
#+HTML_HEAD: <style>.definition {}
#+HTML_HEAD: .definition:before {content: "Definition: "; font-style: italic; font-weight: bold}</style>

* The problem

  I want to have a format that I can convert to ~pdf, html~, and maybe
  ~odt~. The formats I know well are

  - LaTeX
  - org

  One thing I like about org is that it is rather simple, and the
  documents look clean. I do not like that it seems to change constantly
  and that it is not as universally known as LaTeX.

  #+BEGIN_CENTER
  This is stuff to be centered.
  #+END_CENTER

  #+BEGIN_COMMENT
  This is an inline comment. It will not be exported, no matter
  what. One can also mark whole subtrees with COMMENT.
  #+END_COMMENT

  1. A first item in a list.
  2. Another item
     1. With three subparts. This one.
     2. Another one.
     3. <<last>> And the last subpart.

* Requirements

I want to use:

- links, say [[http://google.com][Google]].
- images, say the one in Figure [[clock]].

  #+name: clock
  #+caption: A test image
  #+attr_latex: :width 5cm
  #+attr_html: :align center
  [[./clock.png]]
  
  Apparently one has to have a blank line so that the image looks
  OK. Also, with a caption, the image is centered both in LaTeX and
  HTML export.

  Images can have a caption and not be centered in LaTeX, see
  [[http://orgmode.org/w/?p=org-mode.git;a=commitdiff;h=096f4287a60d04470e0a71ea988816d1c3071ccc][orgmode.org Git]]. 

  #+name: clock2
  #+caption: A test image not centered
  #+attr_latex: :center nil :width 5cm
  [[./clock.png]]


  Centering two images side by side. See [[http://www.mail-archive.com/emacs-orgmode@gnu.org/msg110539.html][{O} Centering side-by-side
  images in latex/pdf export]].

#+BEGIN_CENTER
#+ATTR_LaTeX: :height 0.2\textwidth :center nil
[[./clock.png]]
#+ATTR_LaTeX: :height 0.3\textwidth :center nil
[[./clock.png]]
#+END_CENTER


* Other requirements

** Code

#+index: code

- code, say
  #+begin_src python
    def test(a):
        """This is just a test
        
        Arguments:
        - `a`: test argument
        """
  #+end_src

	#+RESULTS:
	: None


- more code, using the new syntax introduced at [2014-03-26 Wed]:
  #+ATTR_LATEX: :options basicstyle=\itshape
  #+BEGIN_SRC python
    def filter_small_local_girth ( L ):
        i = 0
        result = []
        while i < len(L):
            hasit = (Graph(L[i]).girth()>=7)
            if not(hasit):
                result.append(L[i])
            i = i+1
            print i, hasit
        return result
  #+END_SRC

	#+RESULTS:
	: None


- A code listing with caption

  #+caption: A \LaTeX{} listing
  #+attr_latex: :options numbers=left, captionpos=b
  #+name: latex-code
  #+BEGIN_SRC latex :exports code 
    \begin{equation}
      a^{2}+b^{2}=c^{2}
    \end{equation}
  #+END_SRC

** Math

- math symbols, say \(a^{2}+b^{2}=c^{2}\)
- displayed equations, like:

  #+NAME: the-equation
  \begin{equation}
  a^{2}+b^{2}=c^{2}
  \end{equation}

** R graphics

- An R graphic:

  Apparently, R can export to ~pdf~, see:
  http://article.gmane.org/gmane.emacs.orgmode/90466

  #+name: rcode
  #+begin_src R :results output graphics :exports results :file img.png
  hist(rnorm(100))
  #+END_SRC

  #+caption: R graphic
  #+attr_latex: :width 6cm
  #+attr_html: :width 300 :alt R code :align center
  #+RESULTS: rcode
  [[file:img.png]]

** Graphviz

- Graphviz

  #+BEGIN_SRC dot :cmd dot :cmdline -Tpng :file graphviz.png :exports both :cache yes
    digraph "foo" {
      rankdir=LR;
      params -> builders;
      builders -> objects;
      objects -> file;
    }
  #+END_SRC

    #+RESULTS[6d9e47adf125517b3e395a4143174b0f35bae46c]:
    [[file:graphviz.png]]

** Tikz

*** 

- A tikz picture, that exports well to both \LaTeX{} and HTML.
  # We need the option :width "", otherwise the a default value for
  # width of latex images is used. See org-latex-image-default-width

  #+name: test-tikz
  #+header: :imagemagick yes :iminoptions -density 300 -resize 400
  #+header: :packages '(("" "tikz") ("" "tkz-berge")) :border 1pt
  #+header: :file (by-backend (latex "test-tikz.tikz") (beamer "test-tikz.tikz") (t "test-tikz.png"))
  #+header: :cache yes
  #+begin_src latex :results raw file
    % from http://www.texample.net/tikz/examples/cycle/
    \begin{tikzpicture}[scale=0.5]
      \def \n {5}
      \def \radius {3cm}
      \def \margin {8} % margin in angles, depends on the radius
      
      \foreach \s in {1,...,\n}
      {
        \node[draw, circle] at ({360/\n * (\s - 1)}:\radius) {$\s$};
        \draw[->, >=latex] ({360/\n * (\s - 1)+\margin}:\radius) 
        arc ({360/\n * (\s - 1)+\margin}:{360/\n * (\s)-\margin}:\radius);
      }
    \end{tikzpicture}
  #+end_src
  
  #+attr_latex: :width ""
  #+attr_html: :width 400 :alt test-tikz :align center
  #+RESULTS[10459562657201717ce8d59bcee5b6a75e3032ac]: test-tikz
  [[file:test-tikz.png]]


*** 

- And another, this time with caption. And references: see Figures [[diamond]] and [[clock]].

  #+name: diamond
  #+header: :imagemagick yes :iminoptions -density 300 -resize 400
  #+header: :packages '(("" "tikz")) :border 1pt
  #+header: :file (by-backend (latex "diamond.tikz") (beamer "diamond.tikz") (t "diamond.png"))
  #+begin_src latex :results raw file
    \begin{tikzpicture}
      \draw (1,0) -- (0,1) -- (-1,0) -- (0,-1) -- cycle;
    \end{tikzpicture}
  #+end_src

  #+name: diamond
  #+caption: A diamond!
  #+attr_latex: :float t :width ""
  #+results: diamond
  [[file:diamond.png]]

* Theorems

#+index: theorems

- theorems, definitions, etc.

  #+name: thm-1
  #+begin_theorem
  There are infinite prime numbers \(p\).
  #+end_theorem
  
  A definition:
  #+name: def-closed
  #+begin_definition
  A set is /closed/ if its complement is open.
  #+end_definition

- references, to a bibliographic resource or to another theorem
  previously stated. Like: see Theorem [[thm-1]] and Definition [[def-closed]].

- tables, say:

  #+caption: This is a test table
  #+NAME: the-table
  #+attr_latex: :align |c|c|c|
  #+attr_html: :align center
  |---+---+---|
  | a | b | c |
  |---+---+---|
  | x | y | z |
  |---+---+---|

* Misc

  This block produces a picture of the code:

  #+header: :imagemagick yes :border 1pt
  #+begin_src latex :file frac.png :results raw
  \(
  \frac{1}{2}
  \)
  #+end_src

  #+attr_latex: :width ""
  #+RESULTS:
  [[file:frac.png]]

  #+BEGIN_SRC dot :file example1.png :exports result
    digraph test {
        size="6,5";
        home [label = "Hom"];
        prod [label = "Products"];
        news [label = "News"];
        cont [label = "Contact"];

        home -> {prod news cont}
    }
  #+END_SRC

  #+RESULTS:
  [[file:example1.png]]


* References in beamer

  The following org file when exported to beamer, contains a reference
  in one slide to other. See [[http://www.mail-archive.com/emacs-orgmode@gnu.org/msg109913.html][user labels in beamer export]].

  #+BEGIN_SRC org
,#+TITLE: LaTeX export minimal test

,* Intro
  :PROPERTIES:
  :CUSTOM_ID: introduction
  :END:
This is the first slide.

,* Summary
As we saw on slide [[#introduction][intro]], this is interesting.

,* COMMENT Local Variables

# Local Variables:
# org-latex-prefer-user-labels: t
# End:
  #+END_SRC

* Resources

** In blogs

- [[http://drvinceknight.blogspot.mx/2013/04/makefiles-for-tikz-sagemath-and.html][Makefiles for tikz sagemath and teaching notes written in markdown]]
  Dr. Knight shows a workflow having markdown as source format. Also
  uses ~sage~ for producing images.

- [[http://bowenli37.wordpress.com/tag/org-exp-bibtex/][org-exp-bibtex | Sail Home]] A post describing the use of
  ~org-exp-bibtex~, which has been removed from org-mode, as seen in:
  [[http://thread.gmane.org/gmane.emacs.orgmode/67488/focus%3D67839][org-exp-bibtex missing in git?]] From that thread, this post by Eric
  Fraga seems to be useful: [[http://thread.gmane.org/gmane.emacs.orgmode/67488/focus%3D67839][org-exp-bibtex missing in git?]] as this by
  Rasmus: [[http://thread.gmane.org/gmane.emacs.orgmode/67488/focus%3D67839][org-exp-bibtex missing in git?]] BTW, this might be the
  origin of all the code using bibtex in org: [[http://article.gmane.org/gmane.emacs.orgmode/2406/match%3Dbibliography][dealing with a bibliography]]
- Eric's suggestion apparently uses ~ebib~: [[https://github.com/joostkremers/ebib][joostkremers/ebib Â· GitHub]]

- About pandoc: [[http://chronicle.com/blogs/profhacker/pandoc-converts-all-your-text-documents][Pandoc Converts All Your (Text) Documents -
  ProfHacker]] and [[http://chronicle.com/blogs/profhacker/make-your-own-e-books-with-pandoc][Make Your Own E-Books with Pandoc - ProfHacker]]

** blogs in org

- [[http://orgmode.org/worg/org-blog-wiki.html][Org Blogs and Wikis]]
- Publishing in info: [[info:org#Publishing]]
- A thread in the mailing list: [[http://comments.gmane.org/gmane.emacs.orgmode/45360][Org-Mode for GNU Emacs]]
- A question: [[http://stackoverflow.com/questions/8025703/how-to-create-a-personal-wikiblog-on-github-using-org-mode][How to create a personal wiki+blog on github using org-mode?]]
- [[https://github.com/renard/o-blog][renard/o-blog Â· GitHub]], the page: [[http://renard.github.io/o-blog/][Quick start Guide]]
- More on blogging from org: [[http://jaderholm.com/blog/blogging-with-org-mode-and-octopress][Scott Jaderholm: Blogging With Org-mode and Octopress]]
- [[http://blog.paphus.com/blog/2012/08/01/introducing-octopress-blogging-for-org-mode/][Introducing Octopress Blogging for Org-Mode - On Programming]], the
  repo: [[https://github.com/craftkiller/orgmode-octopress][craftkiller/orgmode-octopress Â· GitHub]]

** github

- [[http://rvf0068.github.io/org-document-test/][Which is a good format to make documents?]] The github page of this document...

* References

** To the equation

We reference equation [[the-equation]] and table [[the-table]] and Theorem
[[thm-1]] and Figure [[clock]]. And also item [[last]]. And to a named code block:
Listing [[latex-code]]. And Figure [[diamond]].

** To books

   We cite [[cite:posetfiber]]. Let us also cite [[cite:MR2522486]].

   Note that to export bibliographies to html, one has to install
   ~bibtex2html~. For ~bibtex2html~ to work, we need to add
   #+BEGIN_EXAMPLE
     openout_any = a
   #+END_EXAMPLE
   to the local ~texmf.cnf~ file, say
   ~/usr/local/texlive/2014/texmf.cnf~. Care has to be taken that the
   last line has a line ending character, see [[http://www.tug.org/pipermail/tex-live/2013-May/033608.html][{tex-live} texmf.cnf
   ignored]].

** State of the references
   Currently, on [2016-10-02 Sun], with org-version:
   #+BEGIN_EXAMPLE
   Org-mode version 8.3.6 (release_8.3.6-1187-geda8ac @ /home/rafael/.emacs.d/site-lisp/org-mode/lisp/)
   #+END_EXAMPLE

   #+attr_html: :align center
   |                | pdf   | html  |
   |----------------+-------+-------|
   | figures        | works | works |
   | equations      | works |       |
   | tables         | works | works |
   | theorems       | works |       |
   | biblio         | works | works |
   | items in lists | works | works |
   | code listings  |       | works  |

#+BIBLIOGRAPHY: ./bibliotest plain limit:t
#+latex: \printindex

* COMMENT Local Variables

# Local Variables:
# org-confirm-babel-evaluate: nil
# org-latex-image-default-width: ".5\\linewidth"
# End:

